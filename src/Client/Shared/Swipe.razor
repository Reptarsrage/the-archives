<div @ontouchstart="OnTouchStart" @ontouchmove="OnTouchMove">
    @Children
</div>

@code {
    [Parameter]
    public RenderFragment? Children { get; set; }

    [Parameter]
    public EventCallback OnSwipeLeft { get; set; }

    [Parameter]
    public EventCallback OnSwipeRight { get; set; }

    [Parameter]
    public EventCallback OnSwipeDown { get; set; }

    [Parameter]
    public EventCallback OnSwipeUp { get; set; }

    private double xDown { get; set; } = double.MinValue;

    private double yDown { get; set; } = double.MinValue;

    private void OnTouchStart(TouchEventArgs e)
    {
        var firstTouch = e.Touches.FirstOrDefault();
        if (firstTouch != null)
        {
            xDown = firstTouch.ClientX;
            yDown = firstTouch.ClientY;
        }
    }

    private async Task OnTouchMove(TouchEventArgs e)
    {
        if (xDown == double.MinValue || yDown == double.MinValue)
        {
            return;
        }

        var firstTouch = e.Touches.FirstOrDefault();
        if (firstTouch == null)
        {
            return;
        }

        var xUp = firstTouch.ClientX;
        var yUp = firstTouch.ClientY;

        var xDiff = xDown - xUp;
        var yDiff = yDown - yUp;

        if (Math.Abs(xDiff) > Math.Abs(yDiff))
        {
            if (xDiff > 0)
            {
                await OnSwipeLeft.InvokeAsync();
            }
            else
            {
                await OnSwipeRight.InvokeAsync();
            }
        }
        else
        {
            if (yDiff > 0)
            {
                await OnSwipeUp.InvokeAsync();
            }
            else
            {
                await OnSwipeDown.InvokeAsync();
            }
        }

        xDown = double.MinValue;
        yDown = double.MinValue;
    }
}