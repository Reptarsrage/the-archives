@page "/search"
@page "/search/{Page:int}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using TheArchives.Shared
@using Microsoft.AspNetCore.WebUtilities
@using System.Collections.Generic
@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager navManager

<header class="header">
    <div class="header-top">
        <a class="nav-logo nav-link" href="/">
            <i class="las la-book" /> The Archives
        </a>

        <span class="header-auth">
            <NavMenu />
        </span>
    </div>

    <div class="header-bottom">
        <a class="nav-logo nav-link" href="/">
            <i class="las la-book" /> The Archives
        </a>

        <SearchInput Value=@searchValue ShowStats=@(!loading) TimeTaken=@timeTaken Total=@total ValueChanged="HandleSearchInput" OnSubmitCallback="HandleSubmit" />

        <span class="header-auth">
            <NavMenu />
        </span>
    </div>
</header>

<main class="main">
    <Loader Loading=@loading />

    <div class="results fade @(loading ? "hidden" : "shown")">
        @* Result items list *@
        <ul class="results-items-list">
            @foreach (var result in results)
            {
                <li class="item">
                    <div>
                        <a href="/reader/@result.ContentId">
                            <h5 class="item-title">@result.Title</h5>
                        </a>
                    </div>
                    <div class="item-author">
                        <span class="item-subheader">
                            Posted to <em>@result.Brand</em> by <em>@result.Author</em>
                        </span>
                    </div>
                    <div>
                        <p class="item-description">@result.Description</p>
                        <div>
                            @foreach (var tag in result.Tags)
                            {
                                <span class="tag"><i class="las la-tag"></i> @tag</span>
                            }
                        </div>
                    </div>
                </li>
            }
        </ul>
    </div>

    @* Pagination *@
    <div class="pager">
        @if (Page > 5)
        {
            <a href="/Search/@queryString" class="page"><i class="la la-angle-double-left"></i></a>
        }

        @if (Page > 0)
        {
            <a href="/Search/@(Page - 1)/@queryString" class="page"><i class="la la-angle-left"></i></a>
        }

        @{
            var elasticLimit = 10_000;
            var totalPossible = Math.Min(elasticLimit, total);
            var maxPage = (int)Math.Ceiling(totalPossible / (double)pageSize);
            var minPage = Math.Max(1, Math.Min(maxPage - 9, Page - 4));
        }

        @for (var i = minPage; i < Math.Min(maxPage + 1, minPage + 10); i++)
        {
            if (Page + 1 == i)
            {
                <span class="page active">@i</span>
            }
            else
            {
                <a href="/Search/@(i - 1)/@queryString" class="page@(Page - 1 == i ? " active" : string.Empty)">@i</a>
            }
        }

        @if (Page < maxPage - 1)
        {
            <a href="/Search/@(Page + 1)/@queryString" class="page"><i class="la la-angle-right"></i></a>
        }
    </div>
</main>


@code {
    [Parameter]
    public int Page { get; set; } = 0;

    private int pageSize { get; set; } = 10;

    private IEnumerable<Content> results { get; set; } = Enumerable.Empty<Content>();

    private bool fetched { get; set; } = false;

    private bool fetching { get; set; } = false;

    private long total { get; set; } = 0;

    private long timeTaken { get; set; } = 0;

    private string queryString { get; set; } = string.Empty;

    private string searchValue { get; set; } = string.Empty;

    private bool loading => !fetched || fetching;

    private void HandleSearchInput(string value)
    {
        searchValue = value;
    }

    private async Task HandleSubmit()
    {
        Page = 0;
        navManager.NavigateTo(QueryHelpers.AddQueryString("/search", nameof(SearchRequest.Search), searchValue));
        await Update();
    }

    protected async override Task OnInitializedAsync()
    {
        await Update();
    }

    private async Task Update()
    {
        var uri = navManager.ToAbsoluteUri(navManager.Uri);
        queryString = uri.Query;
        searchValue = string.Empty;
        if (QueryHelpers.ParseQuery(queryString).TryGetValue(nameof(SearchRequest.Search), out var search))
        {
            searchValue = search;
        }

        await GetSearch();
    }

    private async Task GetSearch()
    {
        try
        {
            fetching = true;

            // Make request
            var parameters = new Dictionary<string, string>
            {
                [nameof(SearchRequest.Search)] = searchValue,
                [nameof(SearchRequest.Page)] = Page.ToString(),
                [nameof(SearchRequest.PageSize)] = pageSize.ToString(),
            };

            var response = await Http.GetFromJsonAsync<SearchResponse>(
            QueryHelpers.AddQueryString("/api/search", parameters));

            // Parse response
            if (response != null)
            {
                results = response.Results;
                total = response.Total;
                timeTaken = response.TimeTaken;
                fetching = false;
                fetched = true;
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}